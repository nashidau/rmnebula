%!PS
%
% Postscript test file for my XML conversion
% 
% Future work:
% * When doing end of line conversion should check for whitespace and
%   subtract one from the wordcount for each one rather then assuming
%   1 and just subtracting that
% * Justification code needs to be integrated into a function
%
% Not formating related
% * Need to support tags for different fonts (markup)
% * Suport for paragraph indents
%

/fontsize 8 def
/titlefontsize 16 def
/wordbreak ( ) def

/pagewidth 595 def
/marginwidth 20 def

/leftmargin 20 def
/parindent -5 def
/rightmargin pagewidth marginwidth sub 2 div def
/normalfont /Times-Roman findfont fontsize scalefont def
/boldfont /Times-Bold findfont fontsize scalefont def
/titlefont /Helvitica findfont titlefontsize scalefont def

/lastyline 10000 def % Used by justify word 

/BreakIntoLines {
        /proc exch def
        /textstring exch def

        /linewidth rightmargin leftmargin sub def

        /breakwidth wordbreak stringwidth pop def
        /lastwordbreak 0 def
        /wordcount 0 def % How many words on this line

        /startchar 0 def
        /curwidth parindent def
       
        /restoftext textstring def

        {
                restoftext wordbreak search
                { 
                        /nextword exch def pop
                        /restoftext exch def
                        /wordwidth nextword stringwidth pop def

                        curwidth wordwidth add linewidth gt
                        {
                                textstring startchar
                                lastwordbreak startchar sub
                                getinterval 
                                % Print the current line
                                curwidth wordcount
                                proc
                                /startchar lastwordbreak def
                                /curwidth wordwidth breakwidth add def
                                /wordcount 1 def 
                        }
                        {
                                /curwidth curwidth wordwidth add
                                breakwidth add def
                                /wordcount wordcount 1 add def
                        } ifelse
                        /lastwordbreak lastwordbreak 
                                        nextword length add 1 add def
                }
                { pop exit }
                ifelse
        } loop
        /lastchar textstring length def
        textstring startchar lastchar startchar sub getinterval 
        curwidth 0 proc % No justification on the last line
} def

/substitestring {
        /replacement exch def
        /searchstr exch def
        /string exch def
        
        /diff searchstr length replacement length sub def
        {
                string searchstr search
                {
                        /prefix exch def
                        /match exch def
                        /post exch def
         
                        % Make room for the new array
                        /moved 
                                string 
                                prefix length searchstr length add
                                post length getinterval
                        def
                        string
                                prefix length replacement length add
                                moved putinterval
                        % Copy in replacement
                        string prefix length replacement putinterval
                        % Space out any surplus
                        diff 0 gt {
                                1 1 diff {
                                        /loopcounter exch def
                                        string
                                                string length loopcounter sub
                                                32 put
                                } for
                        } if
                }        
                {
                        pop
                        % not found
                        exit
                } ifelse
        } loop
        string
} def

/typeset {
         %(ffi) (\256) substitestring
         %(ffl) (\256) substitestring
         %(ff) (\256) substitestring
         (\n) ( ) substitestring
         (\t) ( ) substitestring
         (fi) (\256) substitestring
         (fl) (\257) substitestring
         (\342\200\242) (\267) substitestring % Bullet 
} def


/Times-Roman findfont fontsize scalefont setfont 

/yline 800 def


/justifyprint {
        {
                /width rightmargin leftmargin sub def
                dup 1 gt  {
                        exch width sub neg exch 
                        1 sub div
                        /movedist exch def
                }
                {
                        pop pop
                        /movedist 0 def
                } ifelse

                leftmargin 
                newpar { 
                        /newpar false def
                        parindent add
                } if
                yline moveto 
                movedist exch 0 exch wordbreak 0 get exch widthshow 

		% Move down
                /yline yline fontsize 2 add sub def 
		% If less than 50, jump to the new column
                yline 50 lt { newcolumn } if
        } 
} def
 
/newcolumn {
	leftmargin 100 gt {
		showpage
		/leftmargin marginwidth  def
		% FIXME: Same as elsewhere
		/rightmargin pagewidth marginwidth sub 2 div def
	} {
		/leftmargin rightmargin marginwidth add def
		/rightmargin pagewidth marginwidth sub def
	} ifelse
	/yline 800 def
} def


/print {
        /newpar true def
        typeset
        justifyprint
        BreakIntoLines
} def
/printhere {
        /newpar true def
        /partmp parindent def
        /parindent currentpoint pop leftmargin sub def
        /yline yline fontsize 2 add add def
        typeset
        justifyprint
        BreakIntoLines
        /parindent partmp def
} def
%
% printspell
%
% Prints a spell description
% (Lvl) (spellname) (description) [printspell] -
% 

/printspell {
        /description exch def
        /spellname exch def
        /lvl exch def 
       
        yline 60 lt { newcolumn } if
       
        lvl print (. ) printhere
        boldfont setfont spellname printhere
        normalfont setfont
        ( \320 ) printhere
        description printhere
} def

% 
% Justifies a single word or phrase in a box 
% Will not overlap other justifyword printings
% (pos) (width) (word) [justifyword] -
/justifyword {
        /word exch def
        /boxwidth exch def
        /pos exch def 
        
        yline lastyline ne {
                /xpos 0 def 
                /lastyline yline def
        } if
        
        % Fixme
        /thiswidth word stringwidth pop def
        pos boxwidth 2 div add % Center of box
        thiswidth 2 div sub % position correctly
        yline moveto
        word show
} def
% Justifies a single word or phrase in a box 
% Will not overlap other justifyword printings
% (pos) (width) (word) [justifyright] -
/justifyright {
        /word exch def
        /boxwidth exch def
        /pos exch def 
        
        yline lastyline ne {
                /xpos 0 def 
                /lastyline yline def
        } if
        
        % Fixme
        /thiswidth word stringwidth pop def
        pos boxwidth add % Center of box
        thiswidth sub % position correctly
        yline moveto
        word show
} def


/beginspellsummary {
        boldfont setfont
        (Lvl) (Name) (Area Of Effect) (Duration) (Range) (Type) printsummary
        normalfont setfont
        /yline yline 1 sub def
} def
/endspellsummary {
        /yline yline fontsize sub def

} def
%
% printsummary
% (lvl) (spellname) (aoe) (Duration) (Range) (Type)
/printsummary {
        /spelltype exch def
        /spellrange exch def
        /spellduration exch def
        /spellarea exch def
        /spellname exch def
        /spelllvl exch def

        /lvlwidth 15 def
        /namewidth 100 def
        /areawidth 50 def
        /durwidth 50 def
        /rangewidth 30 def
        /typewidth 15 def
        

        /lvlstart leftmargin def  % leftmargin
        /namestart lvlstart lvlwidth add def 
        /areastart namestart namewidth add def 
        /durstart areastart areawidth add def
        /rangestart durstart durwidth add def
        /typestart rangestart rangewidth add def

        (6) spelllvl eq 
        (11) spelllvl eq 
        (16) spelllvl eq 
        (25) spelllvl eq  or or or
        {  /yline yline fontsize 2 div sub def } if


        lvlstart lvlwidth spelllvl justifyright % Should be justify right
        currentfont
        boldfont setfont
        namestart 4 add yline moveto spellname show % Note different
        setfont % restore previous font
        areastart areawidth spellarea justifyword
        durstart durwidth spellduration justifyword
        rangestart rangewidth spellrange justifyword
        typestart typewidth spelltype justifyword

        /yline yline fontsize 1 add sub def

} def
        

%
% printtitle
%
% Prints the Spell list name - centered in current column
% (name) [printtitle] -
/printtitle {
        /title exch def
        
        titlefont setfont
        title stringwidth
        pop 2 div 
        leftmargin rightmargin add 2 div
        exch sub
        /yline yline fontsize 2 add sub def 
        yline moveto title show
        /yline yline titlefontsize 2 add sub def 
        normalfont setfont
} def


